@use 'variables' as *;

.full {
  width: 100%;
  height: 100%;
}

.absolute-center {
  position:absolute;
  left:50%;
  top:50%;
  transform: translate(-50%, -50%);
}

.spacer {
  display: inline-block;
  width: 1rem;
  height: 1rem;

  &.title {
    // Not showing spacer titles at the moment
    display: none;

    //display: flex;
    //width: auto;
    //justify-content: center;
    //align-items: center;
    //font-size: 0.75rem;
    //letter-spacing: 0.5px;
  }
}

.invisible {
  visibility: hidden; // Will still take up space, but be invisible
}

.hidden {
  display: none !important;
}

.primary-color {
  color: var(--color-primary)
}

.warning {
  color: var(--color-warning);
}

.warning-popup {
  border: 1px solid var(--color-warning);
  border-radius: 4px;
  padding: 1rem;

  .warning {
    font-size: 1.5rem;
  }
}

.error {
  color: var(--color-error);
}

// Remove text highlighting
.no-select {
  user-select: none;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.ri-spin {
  animation: spin 2s linear infinite;
}

.draggable {
  cursor: move; /* fallback */
  cursor: grab; /* W3C standards syntax, all modern browser */

  &:active {
    cursor: grabbing;
  }
}

.section-header {
  color: var(--color-font-header);

  text-transform: uppercase;
  letter-spacing: 1px;
  font-size: 0.875rem;
}

hr {
  border-color: var(--color-surface-hover) !important;
  margin: 0.75rem 0;
}

// Hide annoying outline when keyboard is used (if you don't have a mouse, you're gunna have a bad time anyway)
:focus-visible {
  outline: none;
}

@for $i from 0 through 5 {
  .mt-#{$i} {
    margin-top: #{$i}rem !important;
  }
  .mr-#{$i} {
    margin-right: #{$i}rem !important;
  }
  .mb-#{$i} {
    margin-bottom: #{$i}rem !important;
  }
  .ml-#{$i} {
    margin-left: #{$i}rem !important;
  }
}

@for $i from 0 through 20 {
  .w-#{$i} {
    width: #{$i}rem !important;
  }
}

@each $angle in 90, 180, 270 {
  .rotate#{$angle} {
    transform: rotate(#{$angle}deg);
  }
}

// Makes a flex item as small as possible
.flex-shrink {
  flex: 0 1 auto;
}